Важные вещи, которые должна решать стратегия ветвления
Ветка, на которой вы создаете функциональную ветку, должна быть стабильна в продакшне.
Нельзя сливать код с ошибками или непротестированный код с продакшн веткой (ветка, откуда вы делаете деплой).
В процессе слияния вашего кода с продакшн-веткой вы должны столкнуться с минимальным количеством конфликтов слияния.
Цель стратегии ветвления в том, чтобы повысить стабильность кода и продуктивность разработчиков и избежать лишних конфликтов.

Я не буду затрагивать все типы стратегий ветвления, но я назову лучшую, которая применяется чаще всего.

В ней используются ветви master, develop и feature.

master

Мы называем ее продакшн веткой. В ней находится хорошо протестированный стабильный код.
Из этой ветки должен был произойти предыдущий релиз, и следующий также должен быть из нее.
У нас могут быть пайплайны для релиза из этой ветки (т.е. каждый раз, когда происходит очередное слияние в эту ветку, автоматически запускается пайплайн, который делает сборку и деплой ПО на наши рабочие серверы).
Она должна принимать слияния только с веткой develop.
develop

Ветка на нижнем по отношению к master уровне.
Разработчик, начинающий работать над какой-то функцией, создаёт новую ветку из этой ветки.
После завершения разработки/тестирования/анализа кода разработчик создаёт MR/PR на ту же самую ветку, так как именно из этой ветки мы будем собирать следующий релиз.
Для того, чтобы зарелизить состояние проекта в этой ветке, мы делаем мерж в ветку master.
feature

Ветка, создаваемая из develop для работы над запланированной на следующий выпуск функцией.
Обычно в этой ветке работает один разработчик.
Разделение на эти три типа ветки помогает избегать ненужных конфликтов и повышает продуктивность команды.

Тестирование QA
Однако мы пропустили одну вещь: тестирование QA.

На какой ветке его делать? Другими словами, какую ветку следует развернуть в среде QA?

Самый простой подход: иметь среду QA на ветке разработки (т. е. серверы QA будут развернуты со сборкой, выпускаемой из ветки develop). А после завершения тестирования и контроля качества создается MR/PR в ветку master.

